[acquire.tentative.https.any.html]
  [Returned Promise rejects if callback throws synchronously]
    expected: FAIL

  [The 'steal' option must be used with exclusive locks]
    expected: FAIL

  [The 'signal' and 'ifAvailable' options are mutually exclusive]
    expected: FAIL

  [navigator.locks.request's returned promise resolves after lock is released]
    expected: FAIL

  [mode must be "shared" or "exclusive"]
    expected: FAIL

  [The 'signal' and 'steal' options are mutually exclusive]
    expected: FAIL

  [navigator.locks.request requires a name and a callback]
    expected: FAIL

  [The 'steal' and 'ifAvailable' options are mutually exclusive]
    expected: FAIL

  [callback must be a function]
    expected: FAIL

  [Returned Promise rejects if callback throws asynchronously]
    expected: FAIL


[acquire.tentative.https.any.worker.html]
  [Returned Promise rejects if callback throws synchronously]
    expected: FAIL

  [The 'steal' option must be used with exclusive locks]
    expected: FAIL

  [The 'signal' and 'ifAvailable' options are mutually exclusive]
    expected: FAIL

  [navigator.locks.request's returned promise resolves after lock is released]
    expected: FAIL

  [mode must be "shared" or "exclusive"]
    expected: FAIL

  [The 'signal' and 'steal' options are mutually exclusive]
    expected: FAIL

  [navigator.locks.request requires a name and a callback]
    expected: FAIL

  [The 'steal' and 'ifAvailable' options are mutually exclusive]
    expected: FAIL

  [callback must be a function]
    expected: FAIL

  [Returned Promise rejects if callback throws asynchronously]
    expected: FAIL


[acquire.tentative.https.any.sharedworker.html]
  [Returned Promise rejects if callback throws synchronously]
    expected: FAIL

  [The 'steal' option must be used with exclusive locks]
    expected: FAIL

  [The 'signal' and 'ifAvailable' options are mutually exclusive]
    expected: FAIL

  [navigator.locks.request's returned promise resolves after lock is released]
    expected: FAIL

  [mode must be "shared" or "exclusive"]
    expected: FAIL

  [The 'signal' and 'steal' options are mutually exclusive]
    expected: FAIL

  [navigator.locks.request requires a name and a callback]
    expected: FAIL

  [The 'steal' and 'ifAvailable' options are mutually exclusive]
    expected: FAIL

  [callback must be a function]
    expected: FAIL

  [Returned Promise rejects if callback throws asynchronously]
    expected: FAIL


[acquire.tentative.https.any.serviceworker.html]
  [Returned Promise rejects if callback throws synchronously]
    expected: FAIL

  [The 'steal' option must be used with exclusive locks]
    expected: FAIL

  [The 'signal' and 'ifAvailable' options are mutually exclusive]
    expected: FAIL

  [navigator.locks.request's returned promise resolves after lock is released]
    expected: FAIL

  [mode must be "shared" or "exclusive"]
    expected: FAIL

  [The 'signal' and 'steal' options are mutually exclusive]
    expected: FAIL

  [navigator.locks.request requires a name and a callback]
    expected: FAIL

  [The 'steal' and 'ifAvailable' options are mutually exclusive]
    expected: FAIL

  [callback must be a function]
    expected: FAIL

  [Returned Promise rejects if callback throws asynchronously]
    expected: FAIL

